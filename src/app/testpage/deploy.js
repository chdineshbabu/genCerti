import { ethers } from "ethers";

export async function deploy(){
  const abi = [
    {
      inputs: [
        {
          internalType: "string",
          name: "_certificate_hash",
          type: "string",
        },
      ],
      name: "addCertificateHash",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "string[]",
          name: "_certificates_hash",
          type: "string[]",
        },
      ],
      name: "addMultipleCertificateHashes",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "string",
          name: "_certificate_hash",
          type: "string",
        },
      ],
      name: "checkCertificate",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "totalCertificates",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
  ];

  const bytecode =
    "6080604052348015600e575f80fd5b506107688061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c8063596b772f1461004e578063b16a312d1461006c578063c7b04a6214610088578063ffbd4dd5146100a4575b5f80fd5b6100566100d4565b60405161006391906102a8565b60405180910390f35b6100866004803603810190610081919061040e565b6100da565b005b6100a2600480360381019061009d9190610537565b610193565b005b6100be60048036038101906100b9919061040e565b61025e565b6040516100cb9190610598565b60405180910390f35b60015481565b5f816040516100e99190610603565b90815260200160405180910390205f9054906101000a900460ff1615610144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013b90610673565b60405180910390fd5b60015f826040516101559190610603565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060015f81548092919061018b906106be565b919050555050565b5f5b815181101561025a575f8282815181106101b2576101b1610705565b5b60200260200101516040516101c79190610603565b90815260200160405180910390205f9054906101000a900460ff1661024d5760015f8383815181106101fc576101fb610705565b5b60200260200101516040516102119190610603565b90815260200160405180910390205f6101000a81548160ff02191690831515021790555060015f815480929190610247906106be565b91905055505b8080600101915050610195565b5050565b5f808260405161026e9190610603565b90815260200160405180910390205f9054906101000a900460ff169050919050565b5f819050919050565b6102a281610290565b82525050565b5f6020820190506102bb5f830184610299565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610320826102da565b810181811067ffffffffffffffff8211171561033f5761033e6102ea565b5b80604052505050565b5f6103516102c1565b905061035d8282610317565b919050565b5f67ffffffffffffffff82111561037c5761037b6102ea565b5b610385826102da565b9050602081019050919050565b828183375f83830152505050565b5f6103b26103ad84610362565b610348565b9050828152602081018484840111156103ce576103cd6102d6565b5b6103d9848285610392565b509392505050565b5f82601f8301126103f5576103f46102d2565b5b81356104058482602086016103a0565b91505092915050565b5f60208284031215610423576104226102ca565b5b5f82013567ffffffffffffffff8111156104405761043f6102ce565b5b61044c848285016103e1565b91505092915050565b5f67ffffffffffffffff82111561046f5761046e6102ea565b5b602082029050602081019050919050565b5f80fd5b5f61049661049184610455565b610348565b905080838252602082019050602084028301858111156104b9576104b8610480565b5b835b8181101561050057803567ffffffffffffffff8111156104de576104dd6102d2565b5b8086016104eb89826103e1565b855260208501945050506020810190506104bb565b5050509392505050565b5f82601f83011261051e5761051d6102d2565b5b813561052e848260208601610484565b91505092915050565b5f6020828403121561054c5761054b6102ca565b5b5f82013567ffffffffffffffff811115610569576105686102ce565b5b6105758482850161050a565b91505092915050565b5f8115159050919050565b6105928161057e565b82525050565b5f6020820190506105ab5f830184610589565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6105dd826105b1565b6105e781856105bb565b93506105f78185602086016105c5565b80840191505092915050565b5f61060e82846105d3565b915081905092915050565b5f82825260208201905092915050565b7f436572746966696361746520616c7265616479206578697374730000000000005f82015250565b5f61065d601a83610619565b915061066882610629565b602082019050919050565b5f6020820190508181035f83015261068a81610651565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6106c882610290565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106fa576106f9610691565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212202dd06b94766e41118e4f44115010edb26e6f8cb164b63d4210f0e9077f4888ea64736f6c634300081a0033";

  const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:7545");
  const wallet = new ethers.Wallet("0x44dc920f7cd21af56031f181dfd009f6a7769445171470444076de18786ac699", provider);
  const factory = new ethers.ContractFactory(abi, bytecode, wallet);

  try {
    console.log("Deploying CertificationValidationContract...");
    const contract = await factory.deploy({
      gasLimit: 3000000,
    });
    const receipt = await contract.deployTransaction;
    console.log("Contract deployed at:", contract.address);
    console.log("Transaction receipt:", receipt);
    return { contractAddress: contract.address };
  } catch (error) {
    console.error("Deployment error:", error);
    return { error: "Failed to deploy contract" };
  }
};
